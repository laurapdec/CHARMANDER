import matplotlib.pyplot as plt
import math
import numpy as np
from tkinter import *
import pyglet
from tkinter import ttk

class App:
    def __init__(self,master):

        self.master=master

        self.elements=[]


        CTIlabel = ttk.Labelframe(master, text='Select the .CTI file')
        self.CTIvar = StringVar()
        CTIcombo = ttk.Combobox(CTIlabel,state="readonly", textvariable=self.CTIvar ,values=["GRI Mech 3.0", "SP21RE"])
        
        CTIcombo.grid(pady=5, padx=10)
        CTIlabel.grid(row=0, sticky='W', padx=5, pady=5, ipadx=5, ipady=5)       


        Button(CTIlabel,text="OK",command=self.checkCTI).grid(row=0, column=1, sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 
        
        ## Boundary Conditions
        
        
        Boundlabel = ttk.Labelframe(master, text='Boundary Conditions')
        Boundlabel.grid(sticky=E+W,padx=5, pady=5, ipadx=5, ipady=5)

        # Setting Composition


        BigFrame=Frame(Boundlabel)

        BigFrame.grid(column=2,row=0,sticky=W+N,rowspan=30)

        self.canvas = Canvas(BigFrame, width=200, height=350)
        self.CompositionLabel = ttk.Labelframe(self.canvas, text='Compositions')
        sbar = Scrollbar(BigFrame, orient="vertical", command=self.canvas.yview)
        
        self.canvas.config(yscrollcommand=sbar.set)

        self.canvas.pack(side="left")
        sbar.pack(side="left", fill="y")
        self.canvas.create_window((2,2), window=self.CompositionLabel, anchor="nw",  tags="self.CompositionLabel")        
        
        self.CompositionLabel.bind("<Configure>", self.onFrameConfigure)
        

        
                
        # Select Wall

        Label(master,text="Select the wall :").grid(in_=Boundlabel,row=0,column=0 ,sticky='W', padx=5, pady=5, ipadx=5, ipady=5)
        Boundvar = StringVar()
        Boundcombo = ttk.Combobox(Boundlabel,state="readonly", textvariable=Boundvar ,values=["Wall 1", "Wall 2", "Wall 3", "Wall 4", "Wall 5", "Wall 6"])
        Boundcombo.grid(row=0,column=1,pady=5, padx=10)

        
        
        # Create particles here?

        self.statePart=IntVar()
        
        self.createPart = IntVar()
        self.checkIn=Checkbutton(Boundlabel, text="Generate particles in this Wall?",variable=self.statePart,command=self.checkenable)
        self.checkIn.grid(sticky=W,row=1,columnspan=2)


        # Setting Number of Particles
        
        Label(master,text="Number of particles generated by time step :").grid(in_=Boundlabel,row=2 ,sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 
        self.Nstring=StringVar()
        self.entryN=Entry(master,textvariable=self.Nstring,state='disabled')
        self.entryN.grid(in_=Boundlabel,row=2, column=1, sticky='W', padx=5, pady=5, ipadx=5, ipady=5)
        
        # Setting Temperature
        
        Label(master,text="T [K] :").grid(in_=Boundlabel,row=3 ,sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 
        self.Tstring=StringVar()
        self.entryT=Entry(master,textvariable=self.Tstring,state='disabled')
        self.entryT.grid(in_=Boundlabel,row=3, column=1, sticky='W', padx=5, pady=5, ipadx=5, ipady=5)


        
        
        # Setting Velocities

        VelocityLabel = ttk.Labelframe(Boundlabel, text='Velocities')
        VelocityLabel.grid(sticky=E+W,row=4,padx=5, pady=5, ipadx=5, ipady=5,columnspan=2)
        
        
        Label(master,text="u [m/s] :").grid(in_=VelocityLabel,row=3, sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 
        self.Ustring=StringVar()
        self.Ustring.set(0)
        self.entryU=Entry(master,textvariable=self.Ustring,state='disabled')
        self.entryU.grid(in_=VelocityLabel,row=3, column=1, sticky='W', padx=5, pady=5, ipadx=5, ipady=5)
        
        Label(master,text="v [m/s] :").grid(in_=VelocityLabel,row=4, sticky='W', padx=5, pady=5, ipadx=5, ipady=5)
        self.Vstring=StringVar()
        self.Vstring.set(0)
        self.entryV=Entry(master,textvariable=self.Vstring,state='disabled')
        self.entryV.grid(in_=VelocityLabel,row=4, column=1, sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 

        Label(master,text="w [m/s] :").grid(in_=VelocityLabel,row=5, sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 
        self.Wstring=StringVar()
        self.Wstring.set(0)
        self.entryW=Entry(master,textvariable=self.Wstring,state='disabled')
        self.entryW.grid(in_=VelocityLabel,row=5, column=1, sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 




        # Wall Reflect or Pass
        
        self.WallReflect = IntVar()
        Checkbutton(Boundlabel, text="Reflects?", variable=self.WallReflect).grid(row=5, sticky=W,columnspan=2)



        ## Plot Configure

        ## Run
        
        self.run=Button(master,text="Run",command=running)
        self.run.grid(row=0, column=3, sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 
        

        


    def checkCTI(self):


        for id, field in enumerate(self.elements):
            self.entryComposition[id].grid_forget()
            self.labelComposition[id].grid_forget()

            
        if (self.CTIvar.get()=="SP21RE"):
            self.CTIfile="CTI Files\sp21re.cti"
        elif (self.CTIvar.get()=="GRI Mech 3.0"):
            self.CTIfile="CTI Files\GRI30.cti"

        doc=open(self.CTIfile,'r')
        print(self.CTIfile, "was just imported")
        content=doc.read()
        index=content.find("species=")
        index=index+11
        elements=''
        while content[index] != '"':
            elements+=content[index]
            index+=1
        self.elements=elements.split()
        
        self.stringComposition=[0]*len(self.elements)
        self.labelComposition=[0]*len(self.elements)
        self.entryComposition=[0]*len(self.elements)

        
        for id, field in enumerate(self.elements):
            self.labelComposition[id]=Label(self.CompositionLabel,text=field)
            self.labelComposition[id].grid(row=id ,sticky='W', padx=5, pady=5, ipadx=5, ipady=5) 
            self.stringComposition[id]=StringVar()
            self.stringComposition[id].set(0)
            self.entryComposition[id]=Entry(self.CompositionLabel,textvariable=self.stringComposition[id],state='disabled')
            self.entryComposition[id].grid(row=id, column=1, sticky='W', padx=5, pady=5, ipadx=5, ipady=5)
        self.checkenable()
        


    def onFrameConfigure(self, event):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def checkenable(self):
        if (self.statePart.get()==0):
            self.entryT.configure(state='disabled')
            self.entryN.configure(state='disabled')
            self.entryU.configure(state='disabled')
            self.entryV.configure(state='disabled')
            self.entryW.configure(state='disabled')
            for id, field in enumerate(self.elements):
                self.entryComposition[id].configure(state='disabled')
                

        else:
            self.entryT.configure(state='normal')
            self.entryN.configure(state='normal')
            self.entryU.configure(state='normal')
            self.entryV.configure(state='normal')
            self.entryW.configure(state='normal')
            for id, field in enumerate(self.elements):
                self.entryComposition[id].configure(state='normal')


        

def running():
    finish_file="complete.gif"
    animation = pyglet.resource.animation(finish_file)
    sprite = pyglet.sprite.Sprite(animation)
    # create a window and set it to the image size
    win = pyglet.window.Window(width=sprite.width, height=sprite.height)
    # set window background color = r, g, b, alpha
    # each value goes from 0.0 to 1.0
    green = 0, 1, 0, 1
    pyglet.gl.glClearColor(*green)

    @win.event
    def on_draw():
        win.clear()
        sprite.draw()
    pyglet.app.run()



root = Tk(className=" CHARMANDER : beta version")
root.iconbitmap('icon.ico')

App(root)
root.mainloop()
root.destroy()



